{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]\nCUDA available: False\nGCC: gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44)\nPyTorch: 1.10.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.0+cu111\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMClassification: 0.25.0+3d4f80d", "seed": 839768473, "mmcls_version": "0.25.0", "config": "model = dict(\n    type='ImageClassifier',\n    backbone=dict(\n        type='ResNet_CIFAR',\n        depth=101,\n        num_stages=4,\n        out_indices=(3, ),\n        style='pytorch'),\n    neck=dict(type='GlobalAveragePooling'),\n    head=dict(\n        type='LinearClsHead',\n        num_classes=10,\n        in_channels=2048,\n        loss=dict(type='CrossEntropyLoss', loss_weight=1.0)))\ndataset_type = 'CIFAR10'\nimg_norm_cfg = dict(\n    mean=[125.307, 122.961, 113.8575],\n    std=[51.5865, 50.847, 51.255],\n    to_rgb=False)\ntrain_pipeline = [\n    dict(type='RandomCrop', size=32, padding=4),\n    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n    dict(\n        type='Normalize',\n        mean=[125.307, 122.961, 113.8575],\n        std=[51.5865, 50.847, 51.255],\n        to_rgb=False),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='ToTensor', keys=['gt_label']),\n    dict(type='Collect', keys=['img', 'gt_label'])\n]\ntest_pipeline = [\n    dict(\n        type='Normalize',\n        mean=[125.307, 122.961, 113.8575],\n        std=[51.5865, 50.847, 51.255],\n        to_rgb=False),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='Collect', keys=['img'])\n]\ndata = dict(\n    samples_per_gpu=16,\n    workers_per_gpu=2,\n    train=dict(\n        type='CIFAR10',\n        data_prefix='data/cifar10',\n        pipeline=[\n            dict(type='RandomCrop', size=32, padding=4),\n            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n            dict(\n                type='Normalize',\n                mean=[125.307, 122.961, 113.8575],\n                std=[51.5865, 50.847, 51.255],\n                to_rgb=False),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='ToTensor', keys=['gt_label']),\n            dict(type='Collect', keys=['img', 'gt_label'])\n        ]),\n    val=dict(\n        type='CIFAR10',\n        data_prefix='data/cifar10',\n        pipeline=[\n            dict(\n                type='Normalize',\n                mean=[125.307, 122.961, 113.8575],\n                std=[51.5865, 50.847, 51.255],\n                to_rgb=False),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ],\n        test_mode=True),\n    test=dict(\n        type='CIFAR10',\n        data_prefix='data/cifar10',\n        pipeline=[\n            dict(\n                type='Normalize',\n                mean=[125.307, 122.961, 113.8575],\n                std=[51.5865, 50.847, 51.255],\n                to_rgb=False),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ],\n        test_mode=True))\noptimizer = dict(type='SGD', lr=0.1, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(policy='step', step=[100, 150])\nrunner = dict(type='EpochBasedRunner', max_epochs=200)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'checkpoint/resnet101_b16x8_cifar10_20210528-2d29e936.pth'\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/resnet101_8xb16_cifar10'\ngpu_ids = [0]\ndevice = 'cpu'\nseed = 839768473\n", "CLASSES": ["airplane", "automobile", "bird", "cat", "deer", "dog", "frog", "horse", "ship", "truck"]}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.1, "data_time": 0.02953, "loss": 1.0161, "time": 5.33014}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.1, "data_time": 0.00474, "loss": 2.10521, "time": 3.2574}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.1, "data_time": 0.00265, "loss": 2.03895, "time": 4.15973}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.1, "data_time": 0.00531, "loss": 1.93365, "time": 7.06261}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.1, "data_time": 0.00226, "loss": 1.87698, "time": 2.35976}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.1, "data_time": 0.00269, "loss": 1.81359, "time": 2.82835}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.1, "data_time": 0.0025, "loss": 1.7643, "time": 2.98161}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.1, "data_time": 0.00266, "loss": 1.7401, "time": 3.38106}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.1, "data_time": 0.00276, "loss": 1.68512, "time": 3.11251}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.1, "data_time": 0.00226, "loss": 1.6537, "time": 2.96508}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.1, "data_time": 0.00224, "loss": 1.58918, "time": 1.87419}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.1, "data_time": 0.00203, "loss": 1.60975, "time": 1.85507}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.1, "data_time": 0.00246, "loss": 1.58758, "time": 2.24616}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.1, "data_time": 0.00213, "loss": 1.47708, "time": 1.89682}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.1, "data_time": 0.00188, "loss": 1.50775, "time": 1.65943}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.1, "data_time": 0.00199, "loss": 1.52113, "time": 1.81672}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 0.1, "data_time": 0.00194, "loss": 1.47718, "time": 1.64022}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 0.1, "data_time": 0.002, "loss": 1.47981, "time": 1.92506}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 0.1, "data_time": 0.00216, "loss": 1.37963, "time": 2.63746}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 0.1, "data_time": 0.00206, "loss": 1.36066, "time": 1.76292}
{"mode": "train", "epoch": 1, "iter": 2100, "lr": 0.1, "data_time": 0.0019, "loss": 1.3831, "time": 2.09434}
{"mode": "train", "epoch": 1, "iter": 2200, "lr": 0.1, "data_time": 0.00223, "loss": 1.42393, "time": 2.42479}
{"mode": "train", "epoch": 1, "iter": 2300, "lr": 0.1, "data_time": 0.00203, "loss": 1.32454, "time": 1.67023}
{"mode": "train", "epoch": 1, "iter": 2400, "lr": 0.1, "data_time": 0.00206, "loss": 1.28307, "time": 1.74135}
{"mode": "train", "epoch": 1, "iter": 2500, "lr": 0.1, "data_time": 0.00234, "loss": 1.35504, "time": 1.83684}
{"mode": "train", "epoch": 1, "iter": 2600, "lr": 0.1, "data_time": 0.00207, "loss": 1.32147, "time": 1.91902}
{"mode": "train", "epoch": 1, "iter": 2700, "lr": 0.1, "data_time": 0.00199, "loss": 1.30914, "time": 2.63356}
{"mode": "train", "epoch": 1, "iter": 2800, "lr": 0.1, "data_time": 0.00176, "loss": 1.3175, "time": 1.57937}
{"mode": "train", "epoch": 1, "iter": 2900, "lr": 0.1, "data_time": 0.00203, "loss": 1.24619, "time": 1.75867}
{"mode": "train", "epoch": 1, "iter": 3000, "lr": 0.1, "data_time": 0.00234, "loss": 1.31536, "time": 2.07098}
{"mode": "train", "epoch": 1, "iter": 3100, "lr": 0.1, "data_time": 0.00216, "loss": 1.28794, "time": 1.90355}
{"mode": "val", "epoch": 1, "iter": 625, "lr": 0.1, "accuracy_top-1": 55.67, "accuracy_top-5": 94.21}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.1, "data_time": 0.02327, "loss": 1.22404, "time": 1.98957}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.1, "data_time": 0.00177, "loss": 1.3318, "time": 1.85407}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.1, "data_time": 0.00219, "loss": 1.22743, "time": 2.30693}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.1, "data_time": 0.00252, "loss": 1.19152, "time": 2.2793}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.1, "data_time": 0.00279, "loss": 1.25023, "time": 2.77234}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 0.1, "data_time": 0.00377, "loss": 1.25562, "time": 6.74379}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.1, "data_time": 0.00383, "loss": 1.16824, "time": 4.70015}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.1, "data_time": 0.0038, "loss": 1.18017, "time": 3.2789}
